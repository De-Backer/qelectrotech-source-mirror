.TH "MergeCellsCommand" 3 "Thu Aug 27 2020" "Version 0.8-dev" "QElectroTech" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MergeCellsCommand
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <templatecommands\&.h>\fP
.PP
Inherits \fBTitleBlockTemplateCommand\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBMergeCellsCommand\fP (const \fBTitleBlockTemplateCellsSet\fP &, \fBTitleBlockTemplate\fP *=nullptr, QUndoCommand *=nullptr)"
.br
.ti -1c
.RI "\fB~MergeCellsCommand\fP () override"
.br
.ti -1c
.RI "bool \fBisValid\fP () const"
.br
.ti -1c
.RI "void \fBundo\fP () override"
.br
.ti -1c
.RI "void \fBredo\fP () override"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static bool \fBcanMerge\fP (const \fBTitleBlockTemplateCellsSet\fP &, \fBTitleBlockTemplate\fP *)"
.br
.in -1c
.SS "Static Private Member Functions"

.in +1c
.ti -1c
.RI "static \fBTitleBlockCell\fP * \fBgetBottomRightCell\fP (const \fBTitleBlockTemplateCellsSet\fP &)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBTitleBlockCell\fP * \fBspanning_cell_\fP"
.br
.RI "the cell spanning over the other ones "
.ti -1c
.RI "QHash< \fBTitleBlockCell\fP *, \fBTitleBlockCell\fP * > \fBspanner_cells_before_merge_\fP"
.br
.ti -1c
.RI "int \fBrow_span_before_\fP"
.br
.RI "the row_span attribute of the spanning cell before the merge "
.ti -1c
.RI "int \fBcol_span_before_\fP"
.br
.RI "the col_span attribute of the spanning cell before the merge "
.ti -1c
.RI "int \fBapplied_row_span_before_\fP"
.br
.RI "the applied_row_span attribute of the spanning cell before the merge "
.ti -1c
.RI "int \fBapplied_col_span_before_\fP"
.br
.RI "the applied_col_span attribute of the spanning cell before the merge "
.ti -1c
.RI "int \fBspan_state_before_\fP"
.br
.RI "the span_state attribute of the spanning cell before the merge "
.ti -1c
.RI "int \fBrow_span_after_\fP"
.br
.RI "the row_span attribute of the spanning cell after the merge "
.ti -1c
.RI "int \fBcol_span_after_\fP"
.br
.RI "the col_span attribute of the spanning cell after the merge "
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
This class represents the action of merging 2 to n cells into a single one\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "MergeCellsCommand::MergeCellsCommand (const \fBTitleBlockTemplateCellsSet\fP & merged_cells, \fBTitleBlockTemplate\fP * tbtemplate = \fCnullptr\fP, QUndoCommand * parent = \fCnullptr\fP)"
Construct a command object that acts on \fItbtemplate\fP in order to merge \fImerged_cells\fP\&. Note: you should check the resulting object is valid using \fBisValid()\fP\&. 
.PP
\fBParameters\fP
.RS 4
\fImerged_cells\fP Cells to be merged together into a single one\&. 
.br
\fItbtemplate\fP Modified title block template\&. 
.br
\fIparent\fP Parent QUndoCommand\&. 
.RE
.PP

.SS "MergeCellsCommand::~MergeCellsCommand ()\fC [override]\fP"
Destructor 
.SH "Member Function Documentation"
.PP 
.SS "bool MergeCellsCommand::canMerge (const \fBTitleBlockTemplateCellsSet\fP & merged_cells, \fBTitleBlockTemplate\fP * tbtemplate)\fC [static]\fP"

.PP
\fBParameters\fP
.RS 4
\fImerged_cells\fP Cell sto be merged\&. 
.br
\fItbtemplate\fP Modified title block template\&. 
.RE
.PP
\fBReturns\fP
.RS 4
true if the merge is feasible, false otherwise 
.RE
.PP

.SS "\fBTitleBlockCell\fP * MergeCellsCommand::getBottomRightCell (const \fBTitleBlockTemplateCellsSet\fP & cells_set)\fC [static]\fP, \fC [private]\fP"

.PP
\fBParameters\fP
.RS 4
\fIcells_set\fP Set of title block template visual cells\&. 
.RE
.PP
\fBReturns\fP
.RS 4
the bottom right logical cell within a set of visual cells\&. 
.RE
.PP

.SS "bool MergeCellsCommand::isValid () const"

.PP
\fBReturns\fP
.RS 4
true if this command object is valid and usable, false otherwise\&. 
.RE
.PP

.SS "void MergeCellsCommand::redo ()\fC [override]\fP"
Apply the merge operation 
.SS "void MergeCellsCommand::undo ()\fC [override]\fP"
Undo the merge operation\&. 
.SH "Member Data Documentation"
.PP 
.SS "int MergeCellsCommand::applied_col_span_before_\fC [private]\fP"

.PP
the applied_col_span attribute of the spanning cell before the merge 
.SS "int MergeCellsCommand::applied_row_span_before_\fC [private]\fP"

.PP
the applied_row_span attribute of the spanning cell before the merge 
.SS "int MergeCellsCommand::col_span_after_\fC [private]\fP"

.PP
the col_span attribute of the spanning cell after the merge 
.SS "int MergeCellsCommand::col_span_before_\fC [private]\fP"

.PP
the col_span attribute of the spanning cell before the merge 
.SS "int MergeCellsCommand::row_span_after_\fC [private]\fP"

.PP
the row_span attribute of the spanning cell after the merge 
.SS "int MergeCellsCommand::row_span_before_\fC [private]\fP"

.PP
the row_span attribute of the spanning cell before the merge 
.SS "int MergeCellsCommand::span_state_before_\fC [private]\fP"

.PP
the span_state attribute of the spanning cell before the merge 
.SS "QHash<\fBTitleBlockCell\fP *, \fBTitleBlockCell\fP *> MergeCellsCommand::spanner_cells_before_merge_\fC [private]\fP"
hash associating spanned cells with their spanner_cell attribute before the merge operation 
.SS "\fBTitleBlockCell\fP* MergeCellsCommand::spanning_cell_\fC [private]\fP"

.PP
the cell spanning over the other ones 

.SH "Author"
.PP 
Generated automatically by Doxygen for QElectroTech from the source code\&.
