.TH "QetGraphicsTableItem" 3 "Thu Aug 27 2020" "Version 0.8-dev" "QElectroTech" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QetGraphicsTableItem \- The \fBQetGraphicsTableItem\fP class This item display a table destined to represent the content of a QAbstractItemModel The table have a few parameters to edit her visual aspect\&. Margins, to edit the margin between the cell and the text\&. Text font\&. Text alignment in the cell These three parameters are not settable directly with the table but trough the model to be displayed by the table\&. The table search these parameters only in the index(0,0) for all the table\&. By consequence, set data in other index than 0,0 is useless also these parameter can't be set individually for each cell\&. The margins is stored in the model in index Qt::UserRole+1 and for value a QString\&. See \fBQETUtils::marginsFromString\fP and \fBQETUtils::marginsToString\fP\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <qetgraphicstableitem\&.h>\fP
.PP
Inherits \fBQetGraphicsItem\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum { \fBType\fP = UserType + 1300 }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQetGraphicsTableItem\fP (QGraphicsItem *parent=nullptr)"
.br
.RI "\fBQetGraphicsTableItem::QetGraphicsTableItem\fP Default constructor\&. "
.ti -1c
.RI "virtual \fB~QetGraphicsTableItem\fP () override"
.br
.ti -1c
.RI "int \fBtype\fP () const override"
.br
.ti -1c
.RI "void \fBsetModel\fP (QAbstractItemModel *\fBmodel\fP=nullptr)"
.br
.RI "\fBQetGraphicsTableItem::setModel\fP Set the model presented by this item\&. Since \fBQetGraphicsTableItem\fP don't take ownership of model, if item already have a model, it's your responsibility to delete it\&. "
.ti -1c
.RI "QAbstractItemModel * \fBmodel\fP () const"
.br
.RI "\fBQetGraphicsTableItem::model\fP\&. "
.ti -1c
.RI "virtual QRectF \fBboundingRect\fP () const override"
.br
.RI "\fBQetGraphicsTableItem::boundingRect\fP Reimplemented from QGraphicsObject\&. "
.ti -1c
.RI "virtual void \fBpaint\fP (QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget) override"
.br
.RI "\fBQetGraphicsTableItem::paint\fP Draw the table\&. "
.ti -1c
.RI "\fBQetGraphicsHeaderItem\fP * \fBheaderItem\fP () const"
.br
.ti -1c
.RI "void \fBsetSize\fP (const QSize &\fBsize\fP)"
.br
.RI "\fBQetGraphicsTableItem::setSize\fP Set the current size of the table to size\&. "
.ti -1c
.RI "QSize \fBsize\fP () const"
.br
.RI "\fBQetGraphicsTableItem::size\fP\&. "
.ti -1c
.RI "QSize \fBminimumSize\fP () const"
.br
.RI "\fBQetGraphicsTableItem::minimumSize\fP\&. "
.ti -1c
.RI "void \fBsetDisplayNRow\fP (const int &number)"
.br
.RI "\fBQetGraphicsTableItem::setDisplayNRow\fP Limit the number of row to display\&. "
.ti -1c
.RI "int \fBdisplayNRow\fP () const"
.br
.RI "\fBQetGraphicsTableItem::displayNRow\fP\&. "
.ti -1c
.RI "void \fBsetPreviousTable\fP (\fBQetGraphicsTableItem\fP *table=nullptr)"
.br
.RI "\fBQetGraphicsTableItem::setPreviousTable\fP Set the previous table to table\&. If this table already have a previous table, the previous table will be replaced\&. Set new table to nullptr to remove an existing previous table\&. The table uses the model of the new previous table\&. Since the table does not take ownership of the model, it is your responsibility to manage the old model\&. Linked tables (table with next and/or previous table) share the same model, a table always take the model of the previous table\&. When remove a previous table (set to nullptr) from a table, the model is also removed, you need to set a new model\&. "
.ti -1c
.RI "void \fBsetNextTable\fP (\fBQetGraphicsTableItem\fP *table=nullptr)"
.br
.RI "\fBQetGraphicsTableItem::setNextTable\fP Set the next table to table nullptr will remove an existing next table\&. "
.ti -1c
.RI "void \fBsetTableName\fP (const QString &\fBname\fP)"
.br
.ti -1c
.RI "QString \fBtableName\fP () const"
.br
.ti -1c
.RI "int \fBdisplayNRowOffset\fP () const"
.br
.RI "\fBQetGraphicsTableItem::displayNRowOffset\fP\&. "
.ti -1c
.RI "\fBQetGraphicsTableItem\fP * \fBpreviousTable\fP () const"
.br
.ti -1c
.RI "\fBQetGraphicsTableItem\fP * \fBnextTable\fP () const"
.br
.ti -1c
.RI "void \fBsetToMinimumHeight\fP ()"
.br
.RI "\fBQetGraphicsTableItem::setToMinimumHeight\fP Set the height to the the minimum\&. The width stay unchanged\&. "
.ti -1c
.RI "void \fBinitLink\fP ()"
.br
.ti -1c
.RI "QUuid \fBuuid\fP () const"
.br
.ti -1c
.RI "int \fBminimumRowHeigth\fP () const"
.br
.RI "\fBQetGraphicsTableItem::minimumRowHeigth\fP\&. "
.ti -1c
.RI "QDomElement \fBtoXml\fP (QDomDocument &dom_document) const"
.br
.RI "\fBQetGraphicsTableItem::toXml\fP Save the table to xml\&. "
.ti -1c
.RI "void \fBfromXml\fP (const QDomElement &dom_element)"
.br
.RI "\fBQetGraphicsTableItem::fromXml\fP Restore the table from xml\&. Make this item is already in a diagram to\&. "
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static void \fBadjustTableToFolio\fP (\fBQetGraphicsTableItem\fP *table, QMargins margins=QMargins(20, 20, 20, 0))"
.br
.RI "\fBQetGraphicsTableItem::adjustTableToFolio\fP Adjust the table to fit at best the folio\&. "
.ti -1c
.RI "static void \fBcheckInsufficientRowsCount\fP (\fBQetGraphicsTableItem\fP *first_table)"
.br
.RI "\fBQetGraphicsTableItem::checkInsufficientRowsCount\fP Check if the number of rows of table + linked table is enough to display all content of the model, if not open a dialog to advise user what to do\&. "
.ti -1c
.RI "static QString \fBxmlTagName\fP ()"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBhoverEnterEvent\fP (QGraphicsSceneHoverEvent *event) override"
.br
.RI "\fBQetGraphicsTableItem::hoverEnterEvent\fP Reimplemented from \fBQetGraphicsItem\fP\&. "
.ti -1c
.RI "virtual void \fBhoverLeaveEvent\fP (QGraphicsSceneHoverEvent *event) override"
.br
.RI "\fBQetGraphicsTableItem::hoverLeaveEvent\fP Reimplemented from \fBQetGraphicsItem\fP\&. "
.ti -1c
.RI "virtual bool \fBsceneEventFilter\fP (QGraphicsItem *watched, QEvent *event) override"
.br
.RI "\fBQetGraphicsTableItem::sceneEventFilter\fP Reimplemented from \fBQetGraphicsItem\fP\&. "
.ti -1c
.RI "virtual QVariant \fBitemChange\fP (GraphicsItemChange change, const QVariant &value) override"
.br
.RI "\fBQetGraphicsTableItem::itemChange\fP\&. "
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "QSize \fBsize\fP"
.br
.ti -1c
.RI "int \fBdisplayNRow\fP"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBmodelReseted\fP ()"
.br
.ti -1c
.RI "void \fBsetUpColumnAndRowMinimumSize\fP ()"
.br
.RI "\fBQetGraphicsTableItem::setUpColumnAndRowMinimumSize\fP Calcule the minimum row height and the minimum column width for each columns this function doesn't change the geometry of the table\&. "
.ti -1c
.RI "void \fBsetUpBoundingRect\fP ()"
.br
.RI "\fBQetGraphicsTableItem::setUpBoundingRect\fP\&. "
.ti -1c
.RI "void \fBadjustHandlerPos\fP ()"
.br
.RI "\fBQetGraphicsTableItem::adjustHandlerPos\fP Adjust the pos of the handler item\&. "
.ti -1c
.RI "void \fBsetUpHandler\fP ()"
.br
.RI "\fBQetGraphicsTableItem::setUpHandler\fP\&. "
.ti -1c
.RI "void \fBhandlerMousePressEvent\fP (QGraphicsSceneMouseEvent *event)"
.br
.ti -1c
.RI "void \fBhandlerMouseMoveEvent\fP (QGraphicsSceneMouseEvent *event)"
.br
.ti -1c
.RI "void \fBhandlerMouseReleaseEvent\fP (QGraphicsSceneMouseEvent *event)"
.br
.ti -1c
.RI "void \fBadjustColumnsWidth\fP ()"
.br
.RI "\fBQetGraphicsTableItem::adjustColumnsWidth\fP Adjust the size of each column according to the current table width by setting the sectionSize of the header item\&. "
.ti -1c
.RI "void \fBdataChanged\fP (const QModelIndex &topLeft, const QModelIndex &bottomRight, const QVector< int > &roles)"
.br
.ti -1c
.RI "void \fBheaderSectionResized\fP ()"
.br
.RI "\fBQetGraphicsTableItem::headerSectionResized\fP Connected to the header signal \fBQetGraphicsTableItem\fP sectionResized\&. "
.ti -1c
.RI "void \fBadjustSize\fP ()"
.br
.RI "\fBQetGraphicsTableItem::adjustSize\fP If needed, this function resize the current height and width of table and/or the size of columns\&. according to there minimum\&. "
.ti -1c
.RI "void \fBpreviousTableDisplayRowChanged\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "QAbstractItemModel * \fBm_model\fP = nullptr"
.br
.ti -1c
.RI "QVector< int > \fBm_minimum_column_width\fP"
.br
.ti -1c
.RI "int \fBm_minimum_row_height\fP"
.br
.ti -1c
.RI "int \fBm_number_of_displayed_row\fP = 0"
.br
.ti -1c
.RI "QSize \fBm_current_size\fP"
.br
.ti -1c
.RI "QSize \fBm_old_size\fP"
.br
.ti -1c
.RI "QSize \fBm_pending_size\fP"
.br
.ti -1c
.RI "int \fBm_br_margin\fP = 10"
.br
.ti -1c
.RI "QRectF \fBm_bounding_rect\fP"
.br
.ti -1c
.RI "\fBQetGraphicsHandlerItem\fP \fBm_handler_item\fP"
.br
.ti -1c
.RI "\fBQetGraphicsHeaderItem\fP * \fBm_header_item\fP = nullptr"
.br
.ti -1c
.RI "\fBQetGraphicsTableItem\fP * \fBm_previous_table\fP = nullptr"
.br
.ti -1c
.RI "\fBQetGraphicsTableItem\fP * \fBm_next_table\fP = nullptr"
.br
.ti -1c
.RI "QString \fBm_name\fP"
.br
.ti -1c
.RI "QUuid \fBm_uuid\fP = QUuid::createUuid()"
.br
.ti -1c
.RI "QUuid \fBm_pending_previous_table_uuid\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
The \fBQetGraphicsTableItem\fP class This item display a table destined to represent the content of a QAbstractItemModel The table have a few parameters to edit her visual aspect\&. Margins, to edit the margin between the cell and the text\&. Text font\&. Text alignment in the cell These three parameters are not settable directly with the table but trough the model to be displayed by the table\&. The table search these parameters only in the index(0,0) for all the table\&. By consequence, set data in other index than 0,0 is useless also these parameter can't be set individually for each cell\&. The margins is stored in the model in index Qt::UserRole+1 and for value a QString\&. See \fBQETUtils::marginsFromString\fP and \fBQETUtils::marginsToString\fP\&. 
.SH "Member Enumeration Documentation"
.PP 
.SS "anonymous enum"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIType \fP\fP
.SH "Constructor & Destructor Documentation"
.PP 
.SS "QetGraphicsTableItem::QetGraphicsTableItem (QGraphicsItem * parent = \fCnullptr\fP)"

.PP
\fBQetGraphicsTableItem::QetGraphicsTableItem\fP Default constructor\&. 
.PP
\fBParameters\fP
.RS 4
\fIparent\fP 
.RE
.PP

.SS "QetGraphicsTableItem::~QetGraphicsTableItem ()\fC [override]\fP, \fC [virtual]\fP"

.SH "Member Function Documentation"
.PP 
.SS "void QetGraphicsTableItem::adjustColumnsWidth ()\fC [private]\fP"

.PP
\fBQetGraphicsTableItem::adjustColumnsWidth\fP Adjust the size of each column according to the current table width by setting the sectionSize of the header item\&. 
.SS "void QetGraphicsTableItem::adjustHandlerPos ()\fC [private]\fP"

.PP
\fBQetGraphicsTableItem::adjustHandlerPos\fP Adjust the pos of the handler item\&. 
.SS "void QetGraphicsTableItem::adjustSize ()\fC [private]\fP"

.PP
\fBQetGraphicsTableItem::adjustSize\fP If needed, this function resize the current height and width of table and/or the size of columns\&. according to there minimum\&. 
.SS "void QetGraphicsTableItem::adjustTableToFolio (\fBQetGraphicsTableItem\fP * table, QMargins margins = \fCQMargins(20,20,20,0)\fP)\fC [static]\fP"

.PP
\fBQetGraphicsTableItem::adjustTableToFolio\fP Adjust the table to fit at best the folio\&. 
.PP
\fBParameters\fP
.RS 4
\fItable\fP : table to adjust 
.br
\fImargins\fP : margins between table and folio\&. 
.RE
.PP

.SS "QRectF QetGraphicsTableItem::boundingRect () const\fC [override]\fP, \fC [virtual]\fP"

.PP
\fBQetGraphicsTableItem::boundingRect\fP Reimplemented from QGraphicsObject\&. 
.PP
\fBReturns\fP
.RS 4

.RE
.PP

.SS "void QetGraphicsTableItem::checkInsufficientRowsCount (\fBQetGraphicsTableItem\fP * table)\fC [static]\fP"

.PP
\fBQetGraphicsTableItem::checkInsufficientRowsCount\fP Check if the number of rows of table + linked table is enough to display all content of the model, if not open a dialog to advise user what to do\&. 
.PP
\fBParameters\fP
.RS 4
\fItable\fP 
.RE
.PP

.SS "void QetGraphicsTableItem::dataChanged (const QModelIndex & topLeft, const QModelIndex & bottomRight, const QVector< int > & roles)\fC [private]\fP"

.SS "int QetGraphicsTableItem::displayNRow () const"

.PP
\fBQetGraphicsTableItem::displayNRow\fP\&. 
.PP
\fBReturns\fP
.RS 4
the number of row displayed\&. A value of 0 or less mean there is no limit 
.RE
.PP

.SS "int QetGraphicsTableItem::displayNRowOffset () const"

.PP
\fBQetGraphicsTableItem::displayNRowOffset\fP\&. 
.PP
\fBReturns\fP
.RS 4
the offset (aka the last displayed row) of displayed row\&. If this item have a previous table, the previous offset is added\&. 
.RE
.PP

.SS "void QetGraphicsTableItem::fromXml (const QDomElement & dom_element)"

.PP
\fBQetGraphicsTableItem::fromXml\fP Restore the table from xml\&. Make this item is already in a diagram to\&. 
.PP
\fBParameters\fP
.RS 4
\fIdom_element\fP 
.RE
.PP

.SS "void QetGraphicsTableItem::handlerMouseMoveEvent (QGraphicsSceneMouseEvent * event)\fC [private]\fP"

.SS "void QetGraphicsTableItem::handlerMousePressEvent (QGraphicsSceneMouseEvent * event)\fC [private]\fP"

.SS "void QetGraphicsTableItem::handlerMouseReleaseEvent (QGraphicsSceneMouseEvent * event)\fC [private]\fP"

.SS "\fBQetGraphicsHeaderItem\fP* QetGraphicsTableItem::headerItem () const\fC [inline]\fP"

.SS "void QetGraphicsTableItem::headerSectionResized ()\fC [private]\fP"

.PP
\fBQetGraphicsTableItem::headerSectionResized\fP Connected to the header signal \fBQetGraphicsTableItem\fP sectionResized\&. 
.SS "void QetGraphicsTableItem::hoverEnterEvent (QGraphicsSceneHoverEvent * event)\fC [override]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.PP
\fBQetGraphicsTableItem::hoverEnterEvent\fP Reimplemented from \fBQetGraphicsItem\fP\&. 
.PP
\fBParameters\fP
.RS 4
\fIevent\fP 
.RE
.PP

.SS "void QetGraphicsTableItem::hoverLeaveEvent (QGraphicsSceneHoverEvent * event)\fC [override]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.PP
\fBQetGraphicsTableItem::hoverLeaveEvent\fP Reimplemented from \fBQetGraphicsItem\fP\&. 
.PP
\fBParameters\fP
.RS 4
\fIevent\fP 
.RE
.PP

.SS "void QetGraphicsTableItem::initLink ()"

.SS "QVariant QetGraphicsTableItem::itemChange (GraphicsItemChange change, const QVariant & value)\fC [override]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.PP
\fBQetGraphicsTableItem::itemChange\fP\&. 
.PP
\fBParameters\fP
.RS 4
\fIchange\fP 
.br
\fIvalue\fP 
.RE
.PP
\fBReturns\fP
.RS 4
.RE
.PP

.SS "int QetGraphicsTableItem::minimumRowHeigth () const"

.PP
\fBQetGraphicsTableItem::minimumRowHeigth\fP\&. 
.PP
\fBReturns\fP
.RS 4
the minimum height of a row 
.RE
.PP

.SS "QSize QetGraphicsTableItem::minimumSize () const"

.PP
\fBQetGraphicsTableItem::minimumSize\fP\&. 
.PP
\fBReturns\fP
.RS 4
the minimum size the table can be The returned size take care of the table's minimum width, but also the header item's minimum width 
.RE
.PP

.SS "QAbstractItemModel * QetGraphicsTableItem::model () const"

.PP
\fBQetGraphicsTableItem::model\fP\&. 
.PP
\fBReturns\fP
.RS 4
The model that this item is presenting 
.RE
.PP

.SS "void QetGraphicsTableItem::modelReseted ()\fC [private]\fP"

.SS "\fBQetGraphicsTableItem\fP * QetGraphicsTableItem::nextTable () const"

.SS "void QetGraphicsTableItem::paint (QPainter * painter, const QStyleOptionGraphicsItem * option, QWidget * widget)\fC [override]\fP, \fC [virtual]\fP"

.PP
\fBQetGraphicsTableItem::paint\fP Draw the table\&. 
.PP
\fBParameters\fP
.RS 4
\fIpainter\fP 
.br
\fIoption\fP 
.br
\fIwidget\fP 
.RE
.PP

.SS "\fBQetGraphicsTableItem\fP * QetGraphicsTableItem::previousTable () const"

.SS "void QetGraphicsTableItem::previousTableDisplayRowChanged ()\fC [private]\fP"

.SS "bool QetGraphicsTableItem::sceneEventFilter (QGraphicsItem * watched, QEvent * event)\fC [override]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.PP
\fBQetGraphicsTableItem::sceneEventFilter\fP Reimplemented from \fBQetGraphicsItem\fP\&. 
.PP
\fBParameters\fP
.RS 4
\fIwatched\fP 
.br
\fIevent\fP 
.RE
.PP
\fBReturns\fP
.RS 4
.RE
.PP

.SS "void QetGraphicsTableItem::setDisplayNRow (const int & number)"

.PP
\fBQetGraphicsTableItem::setDisplayNRow\fP Limit the number of row to display\&. 
.PP
\fBParameters\fP
.RS 4
\fInumber\fP : set to 0 or less to disabled the limit of row to display 
.RE
.PP

.SS "void QetGraphicsTableItem::setModel (QAbstractItemModel * model = \fCnullptr\fP)"

.PP
\fBQetGraphicsTableItem::setModel\fP Set the model presented by this item\&. Since \fBQetGraphicsTableItem\fP don't take ownership of model, if item already have a model, it's your responsibility to delete it\&. 
.PP
\fBParameters\fP
.RS 4
\fImodel\fP 
.RE
.PP

.SS "void QetGraphicsTableItem::setNextTable (\fBQetGraphicsTableItem\fP * table = \fCnullptr\fP)"

.PP
\fBQetGraphicsTableItem::setNextTable\fP Set the next table to table nullptr will remove an existing next table\&. 
.PP
\fBParameters\fP
.RS 4
\fItable\fP 
.RE
.PP

.SS "void QetGraphicsTableItem::setPreviousTable (\fBQetGraphicsTableItem\fP * table = \fCnullptr\fP)"

.PP
\fBQetGraphicsTableItem::setPreviousTable\fP Set the previous table to table\&. If this table already have a previous table, the previous table will be replaced\&. Set new table to nullptr to remove an existing previous table\&. The table uses the model of the new previous table\&. Since the table does not take ownership of the model, it is your responsibility to manage the old model\&. Linked tables (table with next and/or previous table) share the same model, a table always take the model of the previous table\&. When remove a previous table (set to nullptr) from a table, the model is also removed, you need to set a new model\&. 
.PP
\fBParameters\fP
.RS 4
\fItable\fP 
.RE
.PP

.SS "void QetGraphicsTableItem::setSize (const QSize & size)"

.PP
\fBQetGraphicsTableItem::setSize\fP Set the current size of the table to size\&. 
.PP
\fBParameters\fP
.RS 4
\fIsize\fP 
.RE
.PP

.SS "void QetGraphicsTableItem::setTableName (const QString & name)"

.SS "void QetGraphicsTableItem::setToMinimumHeight ()"

.PP
\fBQetGraphicsTableItem::setToMinimumHeight\fP Set the height to the the minimum\&. The width stay unchanged\&. 
.SS "void QetGraphicsTableItem::setUpBoundingRect ()\fC [private]\fP"

.PP
\fBQetGraphicsTableItem::setUpBoundingRect\fP\&. 
.SS "void QetGraphicsTableItem::setUpColumnAndRowMinimumSize ()\fC [private]\fP"

.PP
\fBQetGraphicsTableItem::setUpColumnAndRowMinimumSize\fP Calcule the minimum row height and the minimum column width for each columns this function doesn't change the geometry of the table\&. 
.SS "void QetGraphicsTableItem::setUpHandler ()\fC [private]\fP"

.PP
\fBQetGraphicsTableItem::setUpHandler\fP\&. 
.SS "QSize QetGraphicsTableItem::size () const"

.PP
\fBQetGraphicsTableItem::size\fP\&. 
.PP
\fBReturns\fP
.RS 4
The current size of the table 
.RE
.PP

.SS "QString QetGraphicsTableItem::tableName () const"

.SS "QDomElement QetGraphicsTableItem::toXml (QDomDocument & dom_document) const"

.PP
\fBQetGraphicsTableItem::toXml\fP Save the table to xml\&. 
.PP
\fBParameters\fP
.RS 4
\fIdom_document\fP : parent document 
.RE
.PP
\fBReturns\fP
.RS 4
the dom_element that describe the table 
.RE
.PP

.SS "int QetGraphicsTableItem::type () const\fC [inline]\fP, \fC [override]\fP"

.SS "QUuid QetGraphicsTableItem::uuid () const\fC [inline]\fP"

.SS "static QString QetGraphicsTableItem::xmlTagName ()\fC [inline]\fP, \fC [static]\fP"

.SH "Member Data Documentation"
.PP 
.SS "QRectF QetGraphicsTableItem::m_bounding_rect\fC [private]\fP"

.SS "int QetGraphicsTableItem::m_br_margin = 10\fC [private]\fP"

.SS "QSize QetGraphicsTableItem::m_current_size\fC [private]\fP"

.SS "\fBQetGraphicsHandlerItem\fP QetGraphicsTableItem::m_handler_item\fC [private]\fP"

.SS "\fBQetGraphicsHeaderItem\fP* QetGraphicsTableItem::m_header_item = nullptr\fC [private]\fP"

.SS "QVector<int> QetGraphicsTableItem::m_minimum_column_width\fC [private]\fP"

.SS "int QetGraphicsTableItem::m_minimum_row_height\fC [private]\fP"

.SS "QAbstractItemModel* QetGraphicsTableItem::m_model = nullptr\fC [private]\fP"

.SS "QString QetGraphicsTableItem::m_name\fC [private]\fP"

.SS "\fBQetGraphicsTableItem\fP * QetGraphicsTableItem::m_next_table = nullptr\fC [private]\fP"

.SS "int QetGraphicsTableItem::m_number_of_displayed_row = 0\fC [private]\fP"

.SS "QSize QetGraphicsTableItem::m_old_size\fC [private]\fP"

.SS "QUuid QetGraphicsTableItem::m_pending_previous_table_uuid\fC [private]\fP"

.SS "QSize QetGraphicsTableItem::m_pending_size\fC [private]\fP"

.SS "\fBQetGraphicsTableItem\fP* QetGraphicsTableItem::m_previous_table = nullptr\fC [private]\fP"

.SS "QUuid QetGraphicsTableItem::m_uuid = QUuid::createUuid()\fC [private]\fP"

.SH "Property Documentation"
.PP 
.SS "int QetGraphicsTableItem::displayNRow\fC [read]\fP, \fC [write]\fP"

.SS "QSize QetGraphicsTableItem::size\fC [read]\fP, \fC [write]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for QElectroTech from the source code\&.
